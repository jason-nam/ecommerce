{"version":3,"sources":["../src/plugin.ts"],"sourcesContent":["import * as babel from \"@babel/core\"\nimport { createRequire } from \"module\"\nimport type { TransformResult } from \"vite\"\n\nconst require = createRequire(import.meta.url)\n\nconst sourceRegex = /\\.(j|t)sx?$/\nconst tsxRegex = /\\.(j|t)sx$/ // all files are being interpreted as TS, so we'll treat JSX as TSX\n\nexport default function macrosPlugin() {\n  return {\n    name: \"babel-macros\",\n    enforce: \"pre\",\n    async transform(source: string, filename: string) {\n      if (filename.includes(\"node_modules\")) {\n        return undefined\n      }\n\n      if (!sourceRegex.test(filename)) {\n        return undefined\n      }\n\n      const result = await babel.transformAsync(source, {\n        filename,\n        plugins: [\n          require.resolve(\"@babel/plugin-syntax-jsx\"),\n          [\n            require.resolve(\"@babel/plugin-syntax-typescript\"),\n            { isTSX: tsxRegex.test(filename) },\n          ],\n          require.resolve(\"babel-plugin-macros\"),\n        ],\n        babelrc: false,\n        configFile: false,\n        sourceMaps: true,\n      })\n      return result as TransformResult | null\n    },\n  } as const\n}\n"],"mappings":";AAAA;AACA;AAGA,IAAM,WAAU,cAAc,YAAY,GAAG;AAE7C,IAAM,cAAc;AACpB,IAAM,WAAW;AAEF,wBAAwB;AACrC,SAAO;AAAA,IACL,MAAM;AAAA,IACN,SAAS;AAAA,UACH,UAAU,QAAgB,UAAkB;AAChD,UAAI,SAAS,SAAS,cAAc,GAAG;AACrC,eAAO;AAAA,MACT;AAEA,UAAI,CAAC,YAAY,KAAK,QAAQ,GAAG;AAC/B,eAAO;AAAA,MACT;AAEA,YAAM,SAAS,MAAM,AAAM,qBAAe,QAAQ;AAAA,QAChD;AAAA,QACA,SAAS;AAAA,UACP,SAAQ,QAAQ,0BAA0B;AAAA,UAC1C;AAAA,YACE,SAAQ,QAAQ,iCAAiC;AAAA,YACjD,EAAE,OAAO,SAAS,KAAK,QAAQ,EAAE;AAAA,UACnC;AAAA,UACA,SAAQ,QAAQ,qBAAqB;AAAA,QACvC;AAAA,QACA,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,YAAY;AAAA,MACd,CAAC;AACD,aAAO;AAAA,IACT;AAAA,EACF;AACF;","names":[]}